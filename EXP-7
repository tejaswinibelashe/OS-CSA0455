#include <stdio.h>
#include <stdlib.h>
struct Process {
    int pid;            // Process ID
    int burstTime;      // Burst time
    int remainingTime;  // Remaining burst time
    int arrivalTime;    // Arrival time
    int waitingTime;    // Waiting time
    int turnaroundTime; // Turnaround time
    int completionTime; // Completion time
};
void calculateTimes(struct Process p[], int n) {
    int totalWaitingTime = 0, totalTurnaroundTime = 0;
    for (int i = 0; i < n; i++) {
        p[i].turnaroundTime = p[i].completionTime - p[i].arrivalTime;
        p[i].waitingTime = p[i].turnaroundTime - p[i].burstTime;
        totalWaitingTime += p[i].waitingTime;
        totalTurnaroundTime += p[i].turnaroundTime;
    }
    printf("\nProcess ID\tBurst Time\tArrival Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
            p[i].pid, p[i].burstTime, p[i].arrivalTime, p[i].completionTime,
            p[i].turnaroundTime, p[i].waitingTime);
    }
    printf("\nAverage Waiting Time: %.2f", (float)totalWaitingTime / n);
    printf("\nAverage Turnaround Time: %.2f", (float)totalTurnaroundTime / n);
}
void roundRobinScheduling(struct Process p[], int n, int quantum) {
    int time = 0;
    int completed = 0;
    for (int i = 0; i < n; i++) {
        p[i].remainingTime = p[i].burstTime;
    }
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (p[i].remainingTime > 0) {
                if (p[i].remainingTime > quantum) {
                    time += quantum;
                    p[i].remainingTime -= quantum;
                } else {
                    time += p[i].remainingTime;
                    p[i].completionTime = time;
                    p[i].remainingTime = 0;
                    completed++;
                }
            }
        }
    }
    calculateTimes(p, n);
}
int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
    struct Process p[n];
    for (int i = 0; i < n; i++) {
        printf("\nEnter Process ID, Burst Time, and Arrival Time for Process %d: ", i + 1);
        scanf("%d %d %d", &p[i].pid, &p[i].burstTime, &p[i].arrivalTime);
    }
    roundRobinScheduling(p, n, quantum);
    return 0;
}
