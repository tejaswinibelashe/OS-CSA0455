#include <stdio.h>
#include <pthread.h>
#include <stdlib.h>
#include <unistd.h>

// Number of philosophers
#define NUM_PHILOSOPHERS 5

// Forks array (one mutex for each fork)
pthread_mutex_t forks[NUM_PHILOSOPHERS];

// Function to simulate a philosopher thinking
void think(int philosopher) {
    printf("Philosopher %d is thinking.\n", philosopher);
    sleep(1);  // Simulate thinking for a while
}

// Function to simulate a philosopher eating
void eat(int philosopher) {
    printf("Philosopher %d is eating.\n", philosopher);
    sleep(2);  // Simulate eating for a while
}

// Function that simulates a philosopher's behavior
void* philosopher(void* num) {
    int philosopher_num = *((int*)num);
    
    while (1) {
        think(philosopher_num);  // Philosopher thinks

        // Pick up forks
        if (philosopher_num % 2 == 0) {
            // Even philosopher picks up the left fork first
            pthread_mutex_lock(&forks[philosopher_num]);  // Left fork
            pthread_mutex_lock(&forks[(philosopher_num + 1) % NUM_PHILOSOPHERS]);  // Right fork
        } else {
            // Odd philosopher picks up the right fork first
            pthread_mutex_lock(&forks[(philosopher_num + 1) % NUM_PHILOSOPHERS]);  // Right fork
            pthread_mutex_lock(&forks[philosopher_num]);  // Left fork
        }

        // Eating
        eat(philosopher_num);

        // Put down forks
        pthread_mutex_unlock(&forks[philosopher_num]);  // Left fork
        pthread_mutex_unlock(&forks[(philosopher_num + 1) % NUM_PHILOSOPHERS]);  // Right fork
    }

    return NULL;
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopher_numbers[NUM_PHILOSOPHERS];

    // Initialize mutexes for each fork
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_numbers[i] = i;
        if (pthread_create(&threads[i], NULL, philosopher, (void*)&philosopher_numbers[i]) != 0) {
            perror("Thread creation failed");
            return 1;
        }
    }

    // Wait for all philosopher threads to finish (they will run forever in this case)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Clean up mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
