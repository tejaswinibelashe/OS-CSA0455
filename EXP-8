#include <stdio.h>
#include <string.h>
struct Process {
    char id[5];
    int burst_time;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
};
void roundRobin(struct Process p[], int n, int quantum) {
    int time = 0, completed = 0;
    int is_done[n];
    memset(is_done, 0, sizeof(is_done)); 
    printf("\nExecution order: ");
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (p[i].remaining_time > 0) {
                printf("%s -> ", p[i].id);
                if (p[i].remaining_time <= quantum) {
                    time += p[i].remaining_time;
                    p[i].remaining_time = 0;
                    p[i].turnaround_time = time;
                    p[i].waiting_time = p[i].turnaround_time - p[i].burst_time;
                    completed++;
                } else {
                    time += quantum;
                    p[i].remaining_time -= quantum;
                }
            }
        }
    }
    printf("End\n");
}
int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    struct Process processes[n];
    for (int i = 0; i < n; i++) {
        printf("Enter Process ID and Burst Time for Process %d: ", i + 1);
        scanf("%s %d", processes[i].id, &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }
    printf("Enter Time Quantum: ");
    scanf("%d", &quantum);
    roundRobin(processes, n, quantum);
    printf("\nResults:\n");
    printf("ID\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%s\t%d\t%d\t%d\n", processes[i].id, processes[i].burst_time,processes[i].waiting_time, processes[i].turnaround_time);
    }
    return 0;
}
