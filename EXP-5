#include <stdio.h>

// Structure to hold process information
struct Process {
    char id[5];
    int burst_time;
    int priority;
    int waiting_time;
    int turnaround_time;
};

// Function to sort processes by priority
void sortByPriority(struct Process p[], int n) {
    struct Process temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = i + 1; j < n; j++) {
            if (p[i].priority < p[j].priority) {
                temp = p[i];
                p[i] = p[j];
                p[j] = temp;
            }
        }
    }
}

// Main function
int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        printf("Enter Process ID, Burst Time, and Priority for Process %d: ", i + 1);
        scanf("%s %d %d", processes[i].id, &processes[i].burst_time, &processes[i].priority);
    }

    // Sort processes by priority
    sortByPriority(processes, n);

    // Calculate waiting and turnaround times
    processes[0].waiting_time = 0;
    for (int i = 1; i < n; i++) {
        processes[i].waiting_time = processes[i - 1].waiting_time + processes[i - 1].burst_time;
    }
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
    }

    // Display results
    printf("\nExecution order and times:\n");
    printf("ID\tPriority\tBurst\tWaiting\tTurnaround\n");
    for (int i = 0; i < n; i++) {
        printf("%s\t%d\t\t%d\t%d\t%d\n", processes[i].id, processes[i].priority,
               processes[i].burst_time, processes[i].waiting_time, processes[i].turnaround_time);
    }

    return 0;
}
