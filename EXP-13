#include <stdio.h>
#include <stdbool.h>

#define P 5  // Number of processes
#define R 3  // Number of resources

// Function to check if the system is in a safe state
bool isSafeState(int available[], int max[][R], int allocation[][R], int need[][R]) {
    int work[R];
    bool finish[P] = {false};
    
    // Step 1: Initialize work with available resources
    for (int i = 0; i < R; i++) {
        work[i] = available[i];
    }

    // Step 2: Try to find a process that can finish
    while (1) {
        bool found = false;
        for (int p = 0; p < P; p++) {
            if (!finish[p]) {
                // Check if process p can finish
                bool canFinish = true;
                for (int j = 0; j < R; j++) {
                    if (need[p][j] > work[j]) {
                        canFinish = false;
                        break;
                    }
                }
                if (canFinish) {
                    // Process p can finish
                    for (int j = 0; j < R; j++) {
                        work[j] += allocation[p][j];  // Release resources
                    }
                    finish[p] = true;
                    found = true;
                    break;
                }
            }
        }
        if (!found) {
            break;  // No process can finish
        }
    }

    // Step 3: Check if all processes finished
    for (int i = 0; i < P; i++) {
        if (!finish[i]) {
            return false;  // System is not in a safe state
        }
    }
    return true;  // System is in a safe state
}

// Function to request resources from the Banker's Algorithm
bool requestResources(int process, int request[], int available[], int max[][R], int allocation[][R], int need[][R]) {
    // Step 1: Check if the request is less than or equal to the need
    for (int i = 0; i < R; i++) {
        if (request[i] > need[process][i]) {
            printf("Error: Process has exceeded maximum claim.\n");
            return false;
        }
    }

    // Step 2: Check if the request is less than or equal to the available resources
    for (int i = 0; i < R; i++) {
        if (request[i] > available[i]) {
            printf("Error: Resources are not available.\n");
            return false;
        }
    }

    // Step 3: Pretend to allocate resources
    for (int i = 0; i < R; i++) {
        available[i] -= request[i];
        allocation[process][i] += request[i];
        need[process][i] -= request[i];
    }

    // Step 4: Check if the system is in a safe state
    if (isSafeState(available, max, allocation, need)) {
        printf("Resources allocated successfully.\n");
        return true;
    } else {
        // Rollback the allocation
        for (int i = 0; i < R; i++) {
            available[i] += request[i];
            allocation[process][i] -= request[i];
            need[process][i] += request[i];
        }
        printf("Resources request leads to unsafe state. Allocation denied.\n");
        return false;
    }
}

int main() {
    // Number of available resources
    int available[] = {3, 3, 2};  // Example: 3 instances of Resource A, 3 of Resource B, 2 of Resource C

    // Maximum resources needed by each process
    int max[P][R] = {
        {7, 5, 3},  // Process 0
        {3, 2, 2},  // Process 1
        {9, 0, 2},  // Process 2
        {2, 2, 2},  // Process 3
        {4, 3, 3}   // Process 4
    };

    // Resources currently allocated to each process
    int allocation[P][R] = {
        {0, 1, 0},  // Process 0
        {2, 0, 0},  // Process 1
        {3, 0, 2},  // Process 2
        {2, 1, 1},  // Process 3
        {0, 0, 2}   // Process 4
    };

    // Calculate the remaining resources needed (Need = Max - Allocation)
    int need[P][R];
    for (int i = 0; i < P; i++) {
        for (int j = 0; j < R; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }

    // Request resources for a process
    int request[] = {1, 0, 2};  // Process 1 requests 1 unit of A, 0 units of B, and 2 units of C
    int process = 1;  // Process 1 is requesting resources

    printf("Process %d requesting resources...\n", process);
    requestResources(process, request, available, max, allocation, need);

    return 0;
}
