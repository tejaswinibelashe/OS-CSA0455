#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define BUFFER_SIZE 5   // Size of the buffer
#define NUM_ITEMS 10    // Total items to produce/consume

// Shared buffer and other variables
int buffer[BUFFER_SIZE];
int in = 0;   // Index for the producer
int out = 0;  // Index for the consumer

// Semaphores for synchronization
sem_t empty;  // Counts the number of empty slots in the buffer
sem_t full;   // Counts the number of full slots in the buffer
sem_t mutex;  // Ensures mutual exclusion for buffer access

// Producer function
void *producer(void *arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        int item = rand() % 100;  // Generate a random item
        sem_wait(&empty);         // Wait for an empty slot
        sem_wait(&mutex);         // Enter critical section (mutex)
        
        // Produce an item and place it in the buffer
        buffer[in] = item;
        printf("Produced item: %d at index %d\n", item, in);
        
        in = (in + 1) % BUFFER_SIZE;  // Update the producer index
        sem_post(&mutex);             // Exit critical section
        sem_post(&full);              // Signal that there is a full slot
        
        sleep(rand() % 3);  // Simulate time taken to produce an item
    }
    return NULL;
}

// Consumer function
void *consumer(void *arg) {
    for (int i = 0; i < NUM_ITEMS; i++) {
        sem_wait(&full);         // Wait for a full slot
        sem_wait(&mutex);        // Enter critical section (mutex)
        
        // Consume an item from the buffer
        int item = buffer[out];
        printf("Consumed item: %d from index %d\n", item, out);
        
        out = (out + 1) % BUFFER_SIZE;  // Update the consumer index
        sem_post(&mutex);              // Exit critical section
        sem_post(&empty);              // Signal that there is an empty slot
        
        sleep(rand() % 3);  // Simulate time taken to consume an item
    }
    return NULL;
}

int main() {
    // Initialize semaphores
    sem_init(&empty, 0, BUFFER_SIZE);  // Initially, all buffer slots are empty
    sem_init(&full, 0, 0);             // Initially, no slots are full
    sem_init(&mutex, 0, 1);            // Mutex is initially available
    
    // Create producer and consumer threads
    pthread_t producerThread, consumerThread;
    
    pthread_create(&producerThread, NULL, producer, NULL);
    pthread_create(&consumerThread, NULL, consumer, NULL);
    
    // Wait for both threads to finish
    pthread_join(producerThread, NULL);
    pthread_join(consumerThread, NULL);
    
    // Destroy semaphores
    sem_destroy(&empty);
    sem_destroy(&full);
    sem_destroy(&mutex);
    
    return 0;
}
